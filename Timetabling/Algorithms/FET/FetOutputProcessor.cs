using System;
using System.IO;
using System.IO.Abstractions;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Serialization;
using Timetabling.Exceptions;
using Timetabling.Resources;

namespace Timetabling.Algorithms.FET
{

    /// <summary>
    /// Processes the FET output.
    /// </summary>
    public class FetOutputProcessor
    {

        /// <summary>
        /// Name of the FET input. The InputName is primarily used as the name of the FET output directory.
        /// </summary>
        public string InputName { get; }

        /// <summary>
        /// The path to the FET output.
        /// </summary>
        public string OutputDir { get; }

        private static readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger();
        private readonly IFileSystem _fs;

        /// <inheritdoc />
        public FetOutputProcessor(string inputName, string outputDir) : this(inputName, outputDir, new FileSystem()) { }

        /// <summary>
        /// Create new FetOutputProcessor.
        /// </summary>
        /// <param name="inputName">Name of the FET file used for the program input.</param>
        /// <param name="outputDir">Location of the FET output files.</param>
        /// <param name="fileSystem">Filesystem to use.</param>
        internal FetOutputProcessor(string inputName, string outputDir, IFileSystem fileSystem)
        {
            InputName = inputName;
            OutputDir = outputDir;
            _fs = fileSystem;
        }

        /// <summary>
        /// Public facing method which processes the FET algorithm output.
        /// </summary>
        /// <returns>Timetable</returns>
        public Timetable GetTimetable()
        {

            Logger.Info("Looking for FET-CL activities output file in {0}.", OutputDir);

            Timetable tt;
            
            var outputPath = _fs.Path.Combine(OutputDir, InputName) + @"_activities.xml";

            // Create output file stream
            using (var outputFileStream = _fs.File.OpenRead(outputPath))
            {
                // Deserialize XML
                tt = XmlToTimetable(outputFileStream);

                Logger.Info("Found a timetable with {0} activities in FET output.", tt.Activities.Count);
            }

            // TODO: error handling, maybe throw exception, do not return null

            // Clean up output dir
            CleanupOutputDir();

            return tt;
        }

        /// <summary>
        /// Remove output generated by FET.
        /// </summary>
        public void CleanupOutputDir()
        {
            Logger.Info("Cleaning up output dir");

            // List all files in output directory
            _fs.Directory.Delete(OutputDir, true);
        }

        /// <summary>
        /// Deserializes an XML file to a Timetable object.
        /// </summary>
        /// <param name="fileStream">FET algorithm output XML file.</param>
        /// <returns>A Timetable object.</returns>
        /// <exception cref="SerializationException">XML serialization does not create a Timetable object.</exception>
        public Timetable XmlToTimetable(Stream fileStream)
        {
            Timetable tt;

            // Initialize
            var reader = XmlReader.Create(fileStream);
            var serializer = new XmlSerializer(typeof(Timetable));

            // Read and deserialize XML
            try
            {
                tt = serializer.Deserialize(reader) as Timetable;
            }
            catch (Exception ex)
            {
                throw new AlgorithmException("Could not deserialize timetable XML.", ex);
            }
            finally
            {
                reader.Dispose();
            }

            return tt;
        }

    }
}
